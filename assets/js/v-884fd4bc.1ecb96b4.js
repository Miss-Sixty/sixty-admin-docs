(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[229],{7657:(s,n,a)=>{"use strict";a.r(n),a.d(n,{data:()=>e});const e={key:"v-884fd4bc",path:"/guide/css.html",title:"样式",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"CSS Modules",slug:"css-modules",children:[]},{level:2,title:"目录结构",slug:"目录结构",children:[]},{level:2,title:"自定义 element-ui 样式",slug:"自定义-element-ui-样式",children:[]}],filePathRelative:"guide/css.md",git:{updatedTime:1627293786e3,contributors:[{name:"xihe",email:"zhangxihe@bornmega.com",commits:2}]}}},1064:(s,n,a)=>{"use strict";a.r(n),a.d(n,{default:()=>r});var e=a(6252);const p=(0,e.uE)('<h1 id="样式" tabindex="-1"><a class="header-anchor" href="#样式" aria-hidden="true">#</a> 样式</h1><h2 id="css-modules" tabindex="-1"><a class="header-anchor" href="#css-modules" aria-hidden="true">#</a> CSS Modules</h2><p>在样式开发过程中，有两个问题比较突出：</p><ul><li><p>全局污染 —— CSS 文件中的选择器是全局生效的，不同文件中的同名选择器，根据 build 后生成文件中的先后顺序，后面的样式会将前面的覆盖；</p></li><li><p>选择器复杂 —— 为了避免上面的问题，我们在编写样式的时候不得不小心翼翼，类名里会带上限制范围的标示，变得越来越长，多人开发时还很容易导致命名风格混乱，一个元素上使用的选择器个数也可能越来越多，最终导致难以维护。</p></li></ul><p>好在 vue 为我们提供了 scoped 可以很方便的解决上述问题。 它顾名思义给 css 加了一个域的概念。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token comment">/* 编译前 */</span>\n<span class="token selector">.example</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* 编译后 */</span>\n<span class="token selector">.example[_v-f3f3eg9]</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',6),l=(0,e.Uk)("只要加上 "),t=(0,e.Wm)("code",null,"<style scoped>",-1),c=(0,e.Uk)(" 这样 css 就只会作用在当前组件内了。详细文档见 "),o={href:"https://vue-loader.vuejs.org/guide/scoped-css.html#mixing-local-and-global-styles",target:"_blank",rel:"noopener noreferrer"},u=(0,e.Uk)("vue-loader"),i=(0,e.uE)('<div class="custom-container tip"><p class="custom-container-title">提示</p><p>使用 scoped 后，父组件的样式将不会渗透到子组件中。不过一个子组件的根节点会同时受其父组件的 scoped CSS 和子组件的 scoped CSS 的影响。这样设计是为了让父组件可以从布局的角度出发，调整其子组件根元素的样式。</p></div><h2 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构" aria-hidden="true">#</a> 目录结构</h2><p>lrr-pc-admin 所有全局样式都在 @/src/css 目录下设置</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>├── styles\n│   ├── resources           <span class="token comment"># 自动加载全局 scss</span>\n│       ├── mixins.scss     <span class="token comment"># scss 方法</span>\n│       ├── var.scss        <span class="token comment"># 自定义变量</span>\n│   ├── element.scss        <span class="token comment"># element 样式</span>\n│   └── index.scss          <span class="token comment"># 覆盖标签默认样式</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>常见的工作流程是，全局样式都写在 src/styles 目录下，每个页面自己对应的样式都写在自己的 .vue 文件之中</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n  <span class="token comment">/* global styles */</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">\n  <span class="token comment">/* local styles */</span>\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="自定义-element-ui-样式" tabindex="-1"><a class="header-anchor" href="#自定义-element-ui-样式" aria-hidden="true">#</a> 自定义 element-ui 样式</h2><p>由于 element-ui 的样式我们是在全局引入的，所以你想在某个页面里面覆盖它的样式就不能加 scoped，但你又想只覆盖这个页面的 element 样式。这里提供两种修改方式</p><ul><li>第一种 你可以在它的父级加一个 class ，用命名空间来解决问题（不加 scoped）。</li></ul><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token selector">.article-page</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* 你的命名空间 */</span>\n  <span class="token selector">.el-tag</span> <span class="token punctuation">{</span>\n    <span class="token comment">/* element-ui 元素*/</span>\n    <span class="token property">margin-right</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>第二种 可以使用 <code>deep</code> 来解决问题（添加 scoped）。</li></ul><div class="language-scss ext-scss line-numbers-mode"><pre class="language-scss"><code><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">v-deep</span><span class="token punctuation">(</span>.el-tag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">/* element-ui 元素*/</span>\n  <span class="token property">margin-right</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',12),r={render:function(s,n){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.j4)(e.HY,null,[p,(0,e.Wm)("p",null,[l,t,c,(0,e.Wm)("a",o,[u,(0,e.Wm)(a)])]),i],64)}}}}]);