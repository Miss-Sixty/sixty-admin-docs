(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[967],{6480:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-a2f42ec2",path:"/guide/addView.html",title:"新增页面",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"添加一级页面演示",slug:"添加一级页面演示",children:[]},{level:2,title:"多级页面添加演示",slug:"多级页面添加演示",children:[]},{level:2,title:"新增 view",slug:"新增-view",children:[]},{level:2,title:"新增 api",slug:"新增-api",children:[]},{level:2,title:"新增组件",slug:"新增组件",children:[]},{level:2,title:"新增样式",slug:"新增样式",children:[]}],filePathRelative:"guide/addView.md",git:{updatedTime:1627266168e3,contributors:[{name:"xihe",email:"zhangxihe@bornmega.com",commits:1}]}}},5431:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>p});const e=(0,a(6252).uE)('<h1 id="新增页面" tabindex="-1"><a class="header-anchor" href="#新增页面" aria-hidden="true">#</a> 新增页面</h1><p>新增页面需要前端和后端相互配合，前端把指定的路由配置信息提供给后端，由后端更新路由接口返回的数据信息。</p><p>也可在后台的管理员列表中手动的添加路由信息，但并不推荐这样做，因为测试数据和正式数据不互通，所以手动添加的路由信息在正式版上并不会生效。如果想让更新的页面生效就必须在正式版再次手动添加路由信息，这是一件重复的添加工作。所以建议前后端共同维护一份路由文件，避免不必要的工作。</p><h2 id="添加一级页面演示" tabindex="-1"><a class="header-anchor" href="#添加一级页面演示" aria-hidden="true">#</a> 添加一级页面演示</h2><div class="custom-container warning"><p class="custom-container-title">导航栏接口数据</p><p>后端需要把数据结构写成一级路由，且只能有一层 children 对象。</p><p>第一层 children 里如果有一个对象，则页面导航树自动为一级。可通过添加 meta 属性来让它显示为二级菜单结构。</p><p>第一层 children 里如果有多个对象，则页面导航树自动变为二级菜单。</p></div><p><strong>如：新增一个 「直播管理 liveManage」 页面</strong></p><ul><li>1.在 index.js 中写入</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> constantRoutes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> Layout<span class="token punctuation">,</span>\n    redirect<span class="token operator">:</span> <span class="token string">&quot;/liveManage&quot;</span><span class="token punctuation">,</span>\n    children<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        path<span class="token operator">:</span> <span class="token string">&quot;/liveManage&quot;</span><span class="token punctuation">,</span>\n        name<span class="token operator">:</span> <span class="token string">&quot;liveManage&quot;</span><span class="token punctuation">,</span>\n        <span class="token function-variable function">component</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">&quot;@/views/liveManage&quot;</span><span class="token punctuation">)</span>\n      <span class="token punctuation">}</span>\n    <span class="token punctuation">]</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="多级页面添加演示" tabindex="-1"><a class="header-anchor" href="#多级页面添加演示" aria-hidden="true">#</a> 多级页面添加演示</h2><p><strong>如：新增一个 「商品管理 shopManage」 页面</strong></p><div class="custom-container warning"><p class="custom-container-title">导航栏接口数据</p><p>后端需要把数据结构写成一级路由嵌套 children 对象，children 对象中写二级路由信息。</p></div><ul><li>1.商品管理页为多级页面，所以需要在后端维护的路由文件添加 如下代码</li></ul><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    path<span class="token operator">:</span> <span class="token string">&quot;/shopManage&quot;</span><span class="token punctuation">,</span>\n    component<span class="token operator">:</span> Layout<span class="token punctuation">,</span>\n    redirect<span class="token operator">:</span> <span class="token string">&quot;/shopList&quot;</span><span class="token punctuation">,</span>\n    children<span class="token operator">:</span> <span class="token punctuation">[</span>\n      <span class="token punctuation">{</span>\n        path<span class="token operator">:</span> <span class="token string">&quot;/shopList&quot;</span><span class="token punctuation">,</span>\n        name<span class="token operator">:</span> <span class="token string">&quot;shopList&quot;</span><span class="token punctuation">,</span>\n        component<span class="token operator">:</span><span class="token string">&quot;@/views/shopManage/shopList&quot;</span>\n      <span class="token punctuation">}</span><span class="token punctuation">,</span>\n       <span class="token punctuation">{</span>\n        path<span class="token operator">:</span> <span class="token string">&quot;/shopList2&quot;</span><span class="token punctuation">,</span>\n        name<span class="token operator">:</span> <span class="token string">&quot;shopList2&quot;</span><span class="token punctuation">,</span>\n        component<span class="token operator">:</span><span class="token string">&quot;@/views/shopManage/shopList2&quot;</span>\n      <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h2 id="新增-view" tabindex="-1"><a class="header-anchor" href="#新增-view" aria-hidden="true">#</a> 新增 view</h2><p>新增完路由之后不要忘记在 @/views 文件下 创建对应的文件夹，一般一个路由对应一个文件，该模块下的功能组件就建议在本文件夹下创建一个 components 文件夹，各个功能模块维护自己的 components 组件。</p><h2 id="新增-api" tabindex="-1"><a class="header-anchor" href="#新增-api" aria-hidden="true">#</a> 新增 api</h2><p>最后在 @/api 文件夹下创建本模块对应的 api 服务。</p><h2 id="新增组件" tabindex="-1"><a class="header-anchor" href="#新增组件" aria-hidden="true">#</a> 新增组件</h2><p>在全局的 @/components 只会写一些全局的组件，如富文本，Echarts，封装的上传视频组件等等能被公用的组件。每个页面或者模块特定的业务组件则会写在当前 views 下面。如：@/views/liveManage/components/xxx.vue。这样拆分使结构更加清晰，大大减轻了维护成本。</p><p>请记住拆分组件最大的好处不是公用而是可维护性！</p><h2 id="新增样式" tabindex="-1"><a class="header-anchor" href="#新增样式" aria-hidden="true">#</a> 新增样式</h2><p>页面的样式和组件是一个道理，全局的 @/styles 放置全局公用的样式，每一个页面的样式就写在当前 views 下面，请记住加上 scoped 或者命名空间，避免造成全局的样式污染。</p>',22),p={render:function(n,s){return e}}}}]);