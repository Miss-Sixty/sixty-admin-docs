(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[270],{1391:(n,s,a)=>{"use strict";a.r(s),a.d(s,{data:()=>e});const e={key:"v-2679e8fb",path:"/guide/vuex.html",title:"Vuex",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"介绍",slug:"介绍",children:[]},{level:2,title:"settings",slug:"settings",children:[]},{level:2,title:"keepAlive",slug:"keepalive",children:[]},{level:2,title:"menu",slug:"menu",children:[]},{level:2,title:"tabbar",slug:"tabbar",children:[]},{level:2,title:"user",slug:"user",children:[]}],filePathRelative:"guide/vuex.md",git:{updatedTime:1627266168e3,contributors:[{name:"xihe",email:"zhangxihe@bornmega.com",commits:1}]}}},2374:(n,s,a)=>{"use strict";a.r(s),a.d(s,{default:()=>t});const e=(0,a(6252).uE)('<h1 id="vuex" tabindex="-1"><a class="header-anchor" href="#vuex" aria-hidden="true">#</a> Vuex</h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2><p>Vuex 同样实现了自动注册，开发只需关注 <code>@/store/modules/</code> 文件夹里的文件即可，请根据模块区分文件。</p><p>新建模版：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token comment">// example.js</span>\n<span class="token keyword">const</span> state <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> getters <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> actions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> mutations <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\n    namespaced<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    state<span class="token punctuation">,</span>\n    actions<span class="token punctuation">,</span>\n    getters<span class="token punctuation">,</span>\n    mutations\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>文件默认开启命名空间，文件名会默认注册为模块名，使用方法：</p><div class="language-javascript ext-js line-numbers-mode"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>state<span class="token punctuation">.</span>example<span class="token punctuation">.</span>xxx<span class="token punctuation">;</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span>getters<span class="token punctuation">[</span><span class="token string">&#39;example/xxx&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token string">&#39;example/xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>$store<span class="token punctuation">.</span><span class="token function">commit</span><span class="token punctuation">(</span><span class="token string">&#39;example/xxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="settings" tabindex="-1"><a class="header-anchor" href="#settings" aria-hidden="true">#</a> settings</h2><p>负责存放配置相关数据，不建议在该文件进行二次开发。</p><h2 id="keepalive" tabindex="-1"><a class="header-anchor" href="#keepalive" aria-hidden="true">#</a> keepAlive</h2><p>负责记录页面缓存的组件 <code>name</code> 名，不建议在该文件进行二次开发。</p><h2 id="menu" tabindex="-1"><a class="header-anchor" href="#menu" aria-hidden="true">#</a> menu</h2><p>负责生成导航菜单的路由数据，不建议在该文件进行二次开发。</p><h2 id="tabbar" tabindex="-1"><a class="header-anchor" href="#tabbar" aria-hidden="true">#</a> tabbar</h2><p>负责记录标签栏状态，不建议在该文件进行二次开发。</p><p>当配置开启标签栏功能时，页面组件的 <code>name</code> 会在打开页面时自动加入缓存列表，如果页面无需缓存，则不设置 <code>name</code> 即可，注意，是页面组件的 <code>name</code> ，不是路由的 <code>name</code> 。</p><p>固定的标签会将数据存放到 <code>localStorage</code> 里。</p><h2 id="user" tabindex="-1"><a class="header-anchor" href="#user" aria-hidden="true">#</a> user</h2><p>负责实现用户的登录、登出，以及用户信息处理。</p><p>这个文件是需要二次开发的，其中 <code>getters.isLogin</code>、<code>dispatch(&#39;login&#39;)</code>、<code>commit(&#39;setUserData&#39;)</code>、<code>commit(&#39;removeUserData&#39;)</code> 为必须修改的地方，主要负责校验是否登录、登录操作、登录成功记录用户信息、登出清除用户信息。</p><p>按框架的设计，用户登录时不获取权限数据，登录成功后通过 <code>dispatch(&#39;getPermissions&#39;)</code> 获取用户权限数据，如果你的系统是在登录时就能拿到用户权限数据，那在这个方法里可以只保留一句 <code>resolve(permissions)</code> ，只需将权限数据 resolve 出去即可。</p>',21),t={render:function(n,s){return e}}}}]);