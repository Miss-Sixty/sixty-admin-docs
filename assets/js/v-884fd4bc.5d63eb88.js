(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[229],{7657:(s,n,e)=>{"use strict";e.r(n),e.d(n,{data:()=>a});const a={key:"v-884fd4bc",path:"/guide/css.html",title:"样式",lang:"zh-CN",frontmatter:{},excerpt:"",headers:[{level:2,title:"CSS Modules",slug:"css-modules",children:[]},{level:2,title:"目录结构",slug:"目录结构",children:[]}],filePathRelative:"guide/css.md",git:{updatedTime:1627266168e3,contributors:[{name:"xihe",email:"zhangxihe@bornmega.com",commits:1}]}}},3295:(s,n,e)=>{"use strict";e.r(n),e.d(n,{default:()=>u});var a=e(6252);const l=(0,a.uE)('<h1 id="样式" tabindex="-1"><a class="header-anchor" href="#样式" aria-hidden="true">#</a> 样式</h1><h2 id="css-modules" tabindex="-1"><a class="header-anchor" href="#css-modules" aria-hidden="true">#</a> CSS Modules</h2><p>在样式开发过程中，有两个问题比较突出：</p><ul><li><p>全局污染 —— CSS 文件中的选择器是全局生效的，不同文件中的同名选择器，根据 build 后生成文件中的先后顺序，后面的样式会将前面的覆盖；</p></li><li><p>选择器复杂 —— 为了避免上面的问题，我们在编写样式的时候不得不小心翼翼，类名里会带上限制范围的标示，变得越来越长，多人开发时还很容易导致命名风格混乱，一个元素上使用的选择器个数也可能越来越多，最终导致难以维护。</p></li></ul><p>好在 vue 为我们提供了 scoped 可以很方便的解决上述问题。 它顾名思义给 css 加了一个域的概念。</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code><span class="token comment">/* 编译前 */</span>\n<span class="token selector">.example</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">/* 编译后 */</span>\n<span class="token selector">.example[_v-f3f3eg9]</span> <span class="token punctuation">{</span>\n  <span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div>',6),c=(0,a.Uk)("只要加上 "),p=(0,a.Wm)("code",null,"<style scoped>",-1),t=(0,a.Uk)(" 这样 css 就只会作用在当前组件内了。详细文档见 "),r={href:"https://vue-loader.vuejs.org/guide/scoped-css.html#mixing-local-and-global-styles",target:"_blank",rel:"noopener noreferrer"},i=(0,a.Uk)("vue-loader"),o=(0,a.uE)('<div class="custom-container tip"><p class="custom-container-title">TIP</p><p>使用 scoped 后，父组件的样式将不会渗透到子组件中。不过一个子组件的根节点会同时受其父组件的 scoped CSS 和子组件的 scoped CSS 的影响。这样设计是为了让父组件可以从布局的角度出发，调整其子组件根元素的样式。</p></div><h2 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构" aria-hidden="true">#</a> 目录结构</h2><p>lrr-pc-admin 所有全局样式都在 @/src/css 目录下设置</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>├── styles\n│   ├── iview-ui.scss            <span class="token comment"># 全局自定义 iview-ui 样式</span>\n│   ├── index.scss               <span class="token comment"># 全局通用样式</span>\n│   ├── transition.scss          <span class="token comment"># vue transition 动画</span>\n│   └── var.scss                 <span class="token comment"># 全局变量</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>常见的工作流程是，全局样式都写在 src/styles 目录下，每个页面自己对应的样式都写在自己的 .vue 文件之中</p><div class="language-css ext-css line-numbers-mode"><pre class="language-css"><code>&lt;style&gt;\n<span class="token comment">/* global styles */</span>\n&lt;/style&gt;\n\n&lt;style scoped&gt;\n<span class="token comment">/* local styles */</span>\n&lt;/style&gt;\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div>',6),u={render:function(s,n){const e=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.j4)(a.HY,null,[l,(0,a.Wm)("p",null,[c,p,t,(0,a.Wm)("a",r,[i,(0,a.Wm)(e)])]),o],64)}}}}]);